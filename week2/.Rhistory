MyOutlierDetect(GPA,82)
IQR<-IQR(student$GPA)
IQR<-IQR(student$GPA,na.rm = TRUE)
MyOutlierDetect<-function(colname,value){
student<-read.csv("Student.csv")
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
MyOutlierDetect<-function(colname,value){
student<-read.csv("Student.csv")
s<-quantile(student$colname,na.rm = TRUE)
s
IQR<-IQR(student$colname,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
MyOutlierDetect<-function(colname,value){
student<-read.csv("Student.csv")
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
coln<-student[,c(colname)]
coln<-student[,colname]
MyOutlierDetect<-function(colname,value){
student<-read.csv("Student.csv")
coln<-student[,colname]
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
coln<-student[,colna]
coln<-subset(student, select=c(colna))
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
coln<-student[colna]
coln<-student[GPA]
coln<-student[,GPA]
class(student)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna==GPA){
coln=student$GPA
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna==GPA){
coln=student$GPA
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna=="GPA"){
coln=student$GPA
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna=="GPA"){
coln=student$GPA
}else if(colna=="MissClass"){
coln=student$MissClass
}else if(colna=="PartyDays"){
coln=student$PartyDays
}else if(colna=="StudyHrs"){
coln=student$StudyHrs
}else{
return("please enter those variable which can calculate outliers")
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna=="GPA"){
coln=student$GPA
}else if(colna=="MissClass"){
coln=student$MissClass
}else if(colna=="PartyDays"){
coln=student$PartyDays
}else if(colna=="StudyHrs"){
coln=student$StudyHrs
}else{
return("please enter those variable which can calculate outliers")
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
MyOutlierDetect("MissClass",5)
setwd("C:/Users/user/Desktop/R/107-1statistics/week2")
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(colna,na.rm = TRUE)
s
IQR<-IQR(colna,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student$colna,na.rm = TRUE)
s
IQR<-IQR(student$colna,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student$colna,na.rm = TRUE)
s
IQR<-IQR(student$colna,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
s<-quantile(student$GPA,na.rm = TRUE)
s
s<-quantile(student$GPA,na.rm = TRUE)[2]
s
s<-quantile(student$GPA,na.rm = TRUE)[[2]]
s
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$colna,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
s[[2]]
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
s<-quantile(student$colna,na.rm = TRUE)
s
IQR<-IQR(student$colna,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
s<-quantile(student[[colna]],na.rm = TRUE)
s
IQR<-IQR(student[[colna]],na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
class(value)
s<-quantile(student[[colna]],na.rm = TRUE)
s
IQR<-IQR(student[[colna]],na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
class(value)
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
class(value)
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
}
}
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
class(value)
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
as.numeric(value)
print(class(value))
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
print(class(value))
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
print(class(colna))
s<-quantile(student$GPA,na.rm = TRUE)
s
IQR<-IQR(student$GPA,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student[,colna],na.rm = TRUE)
s
IQR<-IQR(student[,colna],na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student[,colna],na.rm = TRUE)
s
IQR<-IQR(student[,colna],na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
setwd("C:/Users/user/Desktop/R/107-1statistics/week2")
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(colna,na.rm = TRUE)
s
IQR<-IQR(colna,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
col<-student[,colna]
s<-quantile(col,na.rm = TRUE)
s
IQR<-IQR(col,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(colna,value){
s<-quantile(student[,colna],na.rm = TRUE)
IQR<-IQR(student[,colna],na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(x,value){
s<-quantile(x,na.rm = TRUE)
IQR<-IQR(x,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
GPA<-student$GPA
MyOutlierDetect(GPA,3)
student<-read.csv("Student.csv")
MyOutlierDetect<-function(x,value){
s<-quantile(x,na.rm = TRUE)
IQR<-IQR(x,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
GPA<-student$GPA
MyOutlierDetect(GPA,5)
#method1
MyOutlierDetect<-function(colna,value){
student<-read.csv("Student.csv")
if(colna=="GPA"){
coln=student$GPA
}else if(colna=="MissClass"){
coln=student$MissClass
}else if(colna=="PartyDays"){
coln=student$PartyDays
}else if(colna=="StudyHrs"){
coln=student$StudyHrs
}else{
return("please enter those variable which can calculate outliers")
}
s<-quantile(coln,na.rm = TRUE)
s
IQR<-IQR(coln,na.rm = TRUE)
min<-s[2]-1.5*IQR
max<-s[4]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
MyOutlierDetect("GPA",3)
MyOutlierDetect("MissClass",5)
MyOutlierDetect("Seat",5)
