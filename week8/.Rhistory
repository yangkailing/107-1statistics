prop.test(x=0.57*1006,n=1006,alternative = "two.sided",conf.level = 0.95)
prop.test(x=0.18*1006,n=1006,alternative = "two.sided",conf.level = 0.95)
1/sqrt(501)
prop.test(x=0.54*501,n=501,alternative = "two.sided",conf.level = 0.95)
prop.test(x=0.05*501,n=501,alternative = "two.sided",conf.level = 0.95)
prop.test(x=c(0.14*524,0.06*542),n=c(524,542),alternative = "two.sided",conf.level = 0.95)
Prop_CI = function(n, p, confd) {
all.phat = c()
for (i in 1:10000) {
phat = sum(sample(c(0,1), n, replace = T, prob = c(1-p,p)))/n
all.phat[i] = phat
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p )
return(CI)
}
Prop_CI(883,0.68,0.95)
# By calculation
n = 883
p = 0.68
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt(p*(1-p)/n)
high.c = p + z*se; high.c
low.c = p - z*se; low.c
915/1467
771/1575
Prop_CI = function(n1,n2,p1, p2, confd) {
all.phat = c()
for (i in 1:10000) {
phat1 = sum(sample(c(0,1), n1, replace = T, prob = c(1-p1,p1)))/n1
phat2 = sum(sample(c(0,1), n2, replace = T, prob = c(1-p2,p2)))/n2
phat_d=phat1-phat2
all.phat[i] = phat_d
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p )
return(CI)
}
Prop_CI(1467,1575,915/1467,771/1575,0.95)
# By calculation
n1 = 1467
n2=1575
p1=915/1467
p2 = 771/1575
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
high.c = p1-p2 + z*se; high.c
low.c = p1-p2 - z*se; low.c
#plot
#draw sample distribution
hist(all.phat,probability = T,breaks = 20,main="sample distribution of phat1-phat2 by sampling",xlab="phat1-phat2",col = "gold",border="white")
Prop_CI = function(n1,n2,p1, p2, confd) {
all.phat = c()
for (i in 1:10000) {
phat1 = sum(sample(c(0,1), n1, replace = T, prob = c(1-p1,p1)))/n1
phat2 = sum(sample(c(0,1), n2, replace = T, prob = c(1-p2,p2)))/n2
phat_d=phat1-phat2
all.phat[i] = phat_d
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p, all.phat=all.phat)
return(CI)
}
CI=Prop_CI(1467,1575,915/1467,771/1575,0.95)
CI
# By calculation
n1 = 1467
n2=1575
p1=915/1467
p2 = 771/1575
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
high.c = p1-p2 + z*se; high.c
low.c = p1-p2 - z*se; low.c
Prop_CI = function(n1,n2,p1, p2, confd) {
all.phat = c()
for (i in 1:10000) {
phat1 = sum(sample(c(0,1), n1, replace = T, prob = c(1-p1,p1)))/n1
phat2 = sum(sample(c(0,1), n2, replace = T, prob = c(1-p2,p2)))/n2
phat_d=phat1-phat2
all.phat[i] = phat_d
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p, all.phat=all.phat)
return(CI)
}
CI=Prop_CI(1467,1575,915/1467,771/1575,0.95)
CI[1:3]
# By calculation
n1 = 1467
n2=1575
p1=915/1467
p2 = 771/1575
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
high.c = p1-p2 + z*se; high.c
low.c = p1-p2 - z*se; low.c
CI[all.phat]
Prop_CI = function(n1,n2,p1, p2, confd) {
all.phat = c()
for (i in 1:10000) {
phat1 = sum(sample(c(0,1), n1, replace = T, prob = c(1-p1,p1)))/n1
phat2 = sum(sample(c(0,1), n2, replace = T, prob = c(1-p2,p2)))/n2
phat_d=phat1-phat2
all.phat[i] = phat_d
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p, all.phat=all.phat)
return(CI)
}
CI=Prop_CI(1467,1575,915/1467,771/1575,0.95)
CI[1:3]
# By calculation
n1 = 1467
n2=1575
p1=915/1467
p2 = 771/1575
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
high.c = p1-p2 + z*se; high.c
low.c = p1-p2 - z*se; low.c
CI[4]
#plot
#draw sample distribution
hist(CI[4],probability = T,breaks = 20,main="sample distribution of phat1-phat2 by sampling",xlab="phat1-phat2",col = "gold",border="white")
CI[4]
Z=0.05*sqrt(501)/0.5
Z=0.05*sqrt(501)/0.5
Z
Z=0.05*sqrt(501)/0.5
dnorm(Z, mean = 0, sd = 1)
Z=0.05*sqrt(501)/0.5
qnorm(Z, mean = 0, sd = 1)
Z=0.05*sqrt(501)/0.5
Z
qnorm(Z, mean = 0, sd = 1)
Z=0.05*sqrt(501)/0.5
Z
pnorm(Z, mean = 0, sd = 1)
Z=0.05*sqrt(501)/0.5
Z
pn=pnorm(Z, mean = 0, sd = 1)
pn-(1-pn)
1/sqrt(501)
CI[[all.phat]]
#plot
#draw sample distribution
hist(CI[[4]],probability = T,breaks = 20,main="sample distribution of phat1-phat2 by sampling",xlab="phat1-phat2",col = "gold",border="white")
#加上理論的部分
curve(dnorm(x,p1-p2,se),add=T,col="navy",lwd=2)
