bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:1000) {
bino.set[i] = Bino.event(n = 1000, p = 0.01)
}
hist(bino.set, prob = T, breaks = 20)
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:1000) {
bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
pb=pbinom(1050,100000,0.01)
1-(pb^4)
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:100) {
bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
hist(bino.set, prob = T, breaks = 20)
pb=pbinom(1050,100000,0.01)
1-(pb^4)
max(bino.set)
1-pnorm(59,mean,sd)
n=100
p=0.5
mean=n*p
mean
sd=sqrt(n*p*(1-p))
sd
1-pnorm(59,mean,sd)
1-pnorm(59.5,mean,sd)
1-pbinom(59,n,p)
1-pnorm(60,mean,sd)
1-pnorm(59,mean,sd)
dd=1-pnorm(3,0,sdd)
sdd=sqrt((2.8^2)+(2.8^2))
sdd
dd=1-pnorm(3,0,sdd)
dd
2*dd
bino.set2<-rbinom(100,1000000,0.3)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(100,1000000,0.1)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(1000,1000000,0.001)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.001)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.3)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.4)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.1)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()
?ggplot
View(df)
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data),col=c("green","blue","yellow", "red")) + geom_histogram()
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
hist(df$data,names.arg=df$group)
hist(df$data)
hist(df$data,col = c("green","blue","yellow", "red"))
hist(df$data,col = c("green","blue","yellow", "red"),nclass=df$group)
(1-pbinom(4,20,0.2))*(pbinom(35,40,0.1))
dbinom(2,5,0.25)
dbinom(2,5,0.25)
n_sd=sqrt((1^2)*(5^2)+(((-1)^2)*(3^2)))
n_mean=80-30
n_sd=sqrt((1^2)*(5^2)+(((-1)^2)*(3^2)))
n_mean+3*n_sd
n_mean2=(80*3)-(30*0.5)
n_sd2=(3^2)*(5^2)+((-0.5)^2)*(3^2)
n_mean2+3*n_sd2
n_mean2=(80*3)-(30*0.5)
n_sd2=(3^2)*(5^2)+((-0.5)^2)*(3^2)
n_mean2+3*n_sd2
n_mean2=(80*3)-(30*0.5)
n_sd2=sqrt((3^2)*(5^2)+((-0.5)^2)*(3^2))
n_mean2+3*n_sd2
#平日
1-pnorm(200,n_mean,n_sd)
#跨年
1-pnorm(200,n_mean2,n_sd2)
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
bino.set<-rbinom(1000,1000000,0.01)
#分類
con<-c()
for (i in 1:100){
if (bino.set[i] < 100000){
con[i]="良好"
}else if (bino.set[i]>=100000 & bino.set[i]<300000){
con[i]="普通"
}else if (bino.set[i]>=300000 & bino.set[i]<700000){
con[i]="不良"
}else{
con[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
library(ggplot2)
hist(df, breaks=10, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
library(ggplot2)
hist(df$data, breaks=10, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
library(ggplot2)
hist(df$data, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
library(ggplot2)
hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
xx=df$data[df$data<=10000]
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
df<-table(df)
hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
df
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
df<-table(df)
hist(df, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
polygon(region.x, region.y, col = "yellow")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
df<-table(df)
hist(df, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "yellow")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
hist(df, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "yellow")
df
region.x=df[group=="良好"]
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
region.x=df[df$group=="良好"]
df$group=="良好"
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "green")
plot.new()
xvalue<-seq(9000, 11000,length.out =  2000+ 1)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
#hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "green")
plot.new()
xvalue<-seq(9000, 11000,length.out =  2000+ 1)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
#hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "green")
xvalue<-seq(9000, 11000,length.out =  2000+ 1)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
#將類別及數量合併成dataframe
df=data.frame(data=bino.set,group=con)
#hist(df$data, breaks=20, main="Histogram", xlab="人數",ylab = "次數")
#polygon(region.x, region.y, col = "green")
xvalue<-seq(9000, 11000,length.out =  2001)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
MyOutlierDetect<-function(x,value){
s<-quantile(x,na.rm = TRUE)
IQR<-IQR(x,na.rm = TRUE)
min<-s[[2]]-1.5*IQR
max<-s[[4]]+1.5*IQR
if(value>=min & value<=max){
return("NO")
}else{
return("YES")
}
}
is.out<-c()
for(i in 1:365){
is.out[i]<-MyOutlierDetect(mutate,mutate[i])
}
mutate<-rbinom(365,1000000,0.01)
is.out<-c()
for(i in 1:365){
is.out[i]<-MyOutlierDetect(mutate,mutate[i])
}
length(is.out[is.out=="YES"])
?sample
mutate<-rbinom(365,1000000,0.01)
table=c()
for(i in 1:365){
table[i]=sum(sample(0:1,1000000,replace=T,c(0.99,0.01)))
}
table
sample(0:1,1000000,replace=T,c(0.99,0.01))
?sample
sum(sample(0:1,1000000,replace=T,prob=0.01))
sum(sample(0:1,1000000,replace=T,0.01))
mutate<-rbinom(365,1000000,0.01)
xvalue<-seq(99000, 101000,length.out =  2001)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
xvalue<-seq(0, 2000,length.out =  2001)
yvalue<-dbinom(xvalue, size=1000000, prob=0.01)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
xvalue<-seq(0, 2000,length.out =  2001)
yvalue<-dbinom(xvalue, size=1000000, prob=0.001)
plot(xvalue, yvalue, main="每天遭竊人數機率分布圖", type="l",xlab="遭竊人數",ylab="機率")
n = 1000000
q1 = n*0.1
q2 = n*0.3
q3 = n*0.7
region.x<-xvalue[ xvalue <= q1 ]
region.y<-yvalue[ xvalue <= q1 ]
region.x<-c(region.x[1], region.x, tail(region.x,1))
region.y<-c(0, region.y,0)
polygon(region.x, region.y)
polygon(region.x, region.y, density=-1,col="green")
0.9x+0.2y=0.7
(5/7)*0.9+(2/7)*0.8
p=(5/7)*0.9+(2/7)*0.8
p
1-p^7
1-pbinom(74.5,450,0.15)
1-pbinom(75,450,0.15)
a<-rbinom(100,20,0.4)
hist(a, breaks=10, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
a<-rbinom(100,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
a<-rbinom(1000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
a<-rbinom(10000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
?hist
a<-rbinom(10000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
?hist
a<-rbinom(1000000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
a<-rbinom(1000000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE",xlim=seq(0,20,1))
a<-rbinom(1000000,20,0.4)
hist(a, breaks=20, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
axis(side = 1, at = seq(1,20,by=1))
a<-rbinom(1000000,20,0.4)
hist(a, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
axis(side = 1, at = seq(1,20,by=1))
a<-rbinom(1000000,20,0.4)
hist(a, breaks=21, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
axis(side = 1, at = seq(1,20,by=1))
a<-dbinom(1:20,20,0.4)
hist(a, breaks=21, col="blue", main="Histogram", xlab="GPA",ylab = "人數",probability = "TRUE")
axis(side = 1, at = seq(1,20,by=1))
a<-dbinom(1:20,20,0.4)
barplot(a, names.arg =seq(0,20,1) , main="bar graph",ylab = '機率', xlab = 'time')
a<-dbinom(1:20,20,0.4)
barplot(a, names.arg =c(1:20) , main="bar graph",ylab = '機率', xlab = 'time')
