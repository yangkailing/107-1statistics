points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
1.48/sqrt(30)
-2.33*sqrt(1/40+1/50)
abs(-2.33*sqrt(1/40+1/50))
88/284
setwd("C:/Users/user/Desktop/R/107-1statistics/week13")
stu=read.csv("Student.csv",sep=",",header=T)
head(stu)
PartyDays=stu$PartyDays
StudyHrs=stu$StudyHrs
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#or
plot(PartyDays,StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#or
plot(StudyHrs,PartyDays,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#or
plot(StudyHrs,PartyDays,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#correlation coefficient
cor.test(PartyDays,StudyHrs)
#Is there any NA value in the data?
length(PartyDays[is.na(PartyDays)])
length(StudyHrs[is.na(StudyHrs)])
#simple linear regression
RESULTS=lm(PartyDays~StudyHrs)
summary(RESULTS)     #same as above
coeff=coefficients(RESULTS)
RESULTS$coefficients
res=residuals(RESULTS)
RESULTS$residuals
summary(RESULTS)     #same as above
yhat=fitted.values(RESULTS) #estimated y (yhat)
RESULTS$fitted.values
dev.off()   #清理畫圖區
plot(PartyDays~StudyHrs,pch=16,col="blue",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
#anova#看SSR跟SSE
anova(RESULTS)
stu=read.csv("Student.csv",sep=",",header=T)
#---------------------------------------------------
head(stu)
PartyDays=stu$PartyDays
StudyHrs=stu$StudyHrs
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#or
plot(StudyHrs,PartyDays,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#correlation coefficient
#看相關係數
cor.test(PartyDays,StudyHrs)
#Is there any NA value in the data?
length(PartyDays[is.na(PartyDays)])
length(StudyHrs[is.na(StudyHrs)])
#simple linear regression
RESULTS=lm(PartyDays~StudyHrs)
summary(RESULTS)     #same as above
coeff=coefficients(RESULTS)
RESULTS$coefficients
res=residuals(RESULTS)
RESULTS$residuals
yhat=fitted.values(RESULTS) #estimated y (yhat)
RESULTS$fitted.values
dev.off()   #清理畫圖區
plot(PartyDays~StudyHrs,pch=16,col="blue",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
#anova#看SSR跟SSE
anova(RESULTS)
stu=read.csv("Student.csv",sep=",",header=T)
#---------------------------------------------------
head(stu)
PartyDays=stu$PartyDays
StudyHrs=stu$StudyHrs
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#or
plot(StudyHrs,PartyDays,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
#correlation coefficient
#看相關係數
cor.test(PartyDays,StudyHrs)
#Is there any NA value in the data?
length(PartyDays[is.na(PartyDays)])
length(StudyHrs[is.na(StudyHrs)])
#simple linear regression
RESULTS=lm(PartyDays~StudyHrs)
summary(RESULTS)     #same as above
coeff=coefficients(RESULTS)
RESULTS$coefficients
res=residuals(RESULTS)
RESULTS$residuals
yhat=fitted.values(RESULTS) #estimated y (yhat)
RESULTS$fitted.values
dev.off()   #清理畫圖區
plot(PartyDays~StudyHrs,pch=16,col="blue",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
#anova#看SSR跟SSE
anova(RESULTS)
stu=read.csv("Student.csv",sep=",",header=T)
head(stu)
PartyDays=stu$PartyDays
StudyHrs=stu$StudyHrs
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
height_m=c(71,70,74,67,65,72,68,74)
height_f=c(60,66,65,66,67,63,69,63,61,65)
parheight_m=c(64,64.5,72.5,64,63,69,67,69.5)
parheight_f=c(63.5,67,65.5,69.5,67.5,65.5,70,63,63,67.5)
plot(x=c(64,74),type="n",xlim=c(64,74),main="parent_height vs height",ylab="height",xlab="parentheight")
points(parheight_m,height_m,pch=16,col="blue")
points(parheight_f,height_f,pch=16,col='red')
legend("bottomright",c("male","female"),col=c("blue","red"),pch=c(16,16))
height_m=c(71,70,74,67,65,72,68,74)
height_f=c(60,66,65,66,67,63,69,63,61,65)
parheight_m=c(64,64.5,72.5,64,63,69,67,69.5)
parheight_f=c(63.5,67,65.5,69.5,67.5,65.5,70,63,63,67.5)
plot(x=c(64,74),type="n",xlim=c(64,74),main="parent_height vs height",ylab="height",xlab="parentheight")
points(parheight_m,height_m,pch=16,col="blue")
points(parheight_f,height_f,pch=16,col='red')
legend("bottomright",c("male","female"),col=c("blue","red"),pch=c(16,16))
plot(x=c(64,74),type="n",xlim=c(64,74),main="parent_height vs height",ylab="height",xlab="parentheight")
points(parheight_m,height_m,pch=16,col="blue")
points(parheight_f,height_f,pch=16,col='red')
legend("bottomright",c("male","female"),col=c("blue","red"),pch=c(16,16))
#scatterplot
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
height_m=c(71,70,74,67,65,72,68,74)
height_f=c(60,66,65,66,67,63,69,63,61,65)
parheight_m=c(64,64.5,72.5,64,63,69,67,69.5)
parheight_f=c(63.5,67,65.5,69.5,67.5,65.5,70,63,63,67.5)
plot(x=c(64,74),type="n",xlim=c(64,74),main="parent_height vs height",ylab="height",xlab="parentheight")
points(parheight_m,height_m,pch=16,col="blue")
points(parheight_f,height_f,pch=16,col='red')
legend("bottomright",c("male","female"),col=c("blue","red"),pch=c(16,16))
#correlation coefficient
#看相關係數
cor.test(PartyDays,StudyHrs)
cor.test(PartyDays,StudyHrs)
#simple linear regression
RESULTS=lm(PartyDays~StudyHrs)
summary(RESULTS)     #same as above
RESULTS=lm(PartyDays~StudyHrs)
summary(RESULTS)     #same as above
coeff=RESULTS$coefficients
res=RESULTS$residuals
yhat=RESULTS$fitted.values #estimated y (yhat)
plot(PartyDays~StudyHrs,pch=16,col="blue",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days")
abline(RESULTS,col="red")
anova(RESULTS)
veh=read.csv("Vehicles.csv",sep=",",header=T)
head(veh)
cor.test(GDP,vehicle)
vehicle=veh$Vehicle
GDP=veh$GDP
plot(vehicle~GDP,pch=16,cex=1,col="navy",main="GDP vs Vehicle number",xlab="GDP",ylab="Vehicle number")
cor.test(GDP,vehicle)
n=100
b1=-0.0138
se_b1=0.0042
t=qt(0.025,df=n-2,lower.tail = F)
low=b1-t*se_b1
high=b1+t*se_b1
n=100
b1=-0.0138
se_b1=0.0042
t=qt(0.025,df=n-2,lower.tail = F)
low=b1-t*se_b1
high=b1+t*se_b1
n=100
b1=-0.0138
se_b1=0.0042
t=qt(0.025,df=n-2,lower.tail = F)
low=b1-t*se_b1;low
high=b1+t*se_b1
n=100
b1=-0.0138
se_b1=0.0042
t=qt(0.025,df=n-2,lower.tail = F)
low=b1-t*se_b1
high=b1+t*se_b1
low;high
#data cleaning
student=read.csv("Student.csv",sep=",",header=T)
student=student[,c("PartyDays","StudyHrs")]
student=na.omit(student)
PartyDays=student$PartyDays
StudyHrs=student$StudyHrs
#simple linear regression
RESULTS=lm(PartyDays~StudyHrs, data=student)
summary(RESULTS)
#correlation coefficient
cor.test(PartyDays,StudyHrs)
#ANOVA
anova(RESULTS)
#手動計算
x.mean=mean(student$StudyHrs)
y.mean=mean(student$PartyDays)
student$xx=student$StudyHrs- x.mean
student$yy=student$PartyDays - y.mean
student$xxyy=student$xx*student$yy
student$xx2= student$xx^2
##b1
b1 = sum(student$xxyy)/sum(student$xx2);b1
##SSE
RESULTS=lm(PartyDays~StudyHrs, data=student)
yhat=RESULTS$fitted.values
SSE=sum((student$PartyDays-yhat)^2);SSE
##standard error of residual
s=sqrt(SSE/(nrow(student)-2));s
#PI
PI=predict(RESULTS,data.frame(StudyHrs=c(10,20,30)),interval="prediction",level=0.95)
#PI
PI=predict(RESULTS,data.frame(StudyHrs=c(10,20,30)),interval="prediction",level=0.95)
#CI
CI=predict(RESULTS,data.frame(StudyHrs=c(10,20,30)),interval="confidence",level=0.95)
#plotting
fit=PI[,1]
PI.low=PI[,2]
PI.high=PI[,3]
CI.low=CI[,2]
CI.high=CI[,3]
xx.test=c(10,20,30)
par(mfrow=c(1,2))#把畫布分開(列，欄)
plot(PartyDays~StudyHrs,data=student,pch=20,col="gray50",
main="Prediction interval",xlab="study_hrs",ylab="party_days",
ylim=c(-5,32),cex.main=2,cex.lab=1.2)
abline(RESULTS,col="navy")
for(i in 1:length(xx.test)){
lines(c(xx.test[i],xx.test[i]),c(PI.low[i],PI.high[i]),col="red",lwd=3)
points(xx.test[i],PI.low[i],col="red",pch=15)
points(xx.test[i],PI.high[i],col="red",pch=15)
points(xx.test[i],fit[i],col="red",pch=8)
}
#plot CI
plot(PartyDays~StudyHrs,data=student,pch=20,col="gray50",
main="Confidence interval",xlab="study_hrs",ylab="party_days",
ylim=c(-5,32),cex.main=2,cex.lab=1.2)
abline(RESULTS,col="navy")
for(i in 1:length(xx.test)){
lines(c(xx.test[i],xx.test[i]),c(CI.low[i],CI.high[i]),col="red",lwd=3)
points(xx.test[i],CI.low[i],col="red",pch=15)
points(xx.test[i],CI.high[i],col="red",pch=15)
points(xx.test[i],fit[i],col="red",pch=8)
}
#draw the scatter plot
dev.off()
##y vs x
plot(PartyDays~StudyHrs,pch=16,cex=1,col="navy",
main="PartyDays vs StudyHrs",xlab="Study_Hrs",ylab="Party_Days",cex.main=2,cex.lab=1.2)
#residuals vs x
res=RESULTS$res
plot(res~StudyHrs,pch=16,cex=1,col="gold3",
main="residual vs StudyHrs",xlab="Study_Hrs",ylab="residuals",
ylim=c(-24,24),cex.main=2,cex.lab=1.2)
abline(h=0,col="red")
#histogram of residuals
par(mfrow=c(1,2))
hist(res,breaks=20,border="white",col="olivedrab3",
main="histogram of residual", xlab="residuals",
cex.main=2,cex.lab=1.2)
#qqplot
qqnorm(res,cex.main=2,cex.lab=1.2)
qqline(res,col="red")
#data cleaning
veh=read.csv("Vehicles.csv",sep=",",header=T)
veh=veh[,c("Vehicle","GDP")]
veh=na.omit(veh)
Vehicle=veh$Vehicle
GDP=veh$GDP
#simple linear regression
RESULTS=lm(Vehicle~GDP, data=veh)
summary(RESULTS)
plot(Vehicle~GDP,pch=16,cex=1,col="navy",
main="Vehicle vs GDP",xlab="GDP(1 billion)",ylab="Vehicle",cex.main=2,cex.lab=1.2)
n=100
b1=-0.0138
se_b1=0.0042
alpha=0.05
t=qt(alpha/2,df=n-2,lower.tail = F)
low=b1-t*se_b1
high=b1+t*se_b1
low;high
#PI
PI=predict(RESULTS,data.frame(GDP=c(9000,13000,17000)),interval="prediction",level=0.95);PI
#CI
CI=predict(RESULTS,data.frame(GDP=c(9000,13000,17000)),interval="confidence",level=0.95);CI
#plotting
fit=PI[,1]
PI.low=PI[,2]
PI.high=PI[,3]
CI.low=CI[,2]
CI.high=CI[,3]
xx.test=c(9000,13000,17000)
par(mfrow=c(1,2))#把畫布分開(列，欄)
#plot PI
plot(Vehicle~GDP,data=veh,pch=20,col="gray50",
main="Prediction interval",xlab="GDP",ylab="Vehicle",
xlim=c(5500,18000),ylim=c(2900000,7100000),cex.main=2,cex.lab=1.2)
abline(RESULTS,col="navy")
for(i in 1:length(xx.test)){
lines(c(xx.test[i],xx.test[i]),c(PI.low[i],PI.high[i]),col="red",lwd=3)
points(xx.test[i],PI.low[i],col="red",pch=15)
points(xx.test[i],PI.high[i],col="red",pch=15)
points(xx.test[i],fit[i],col="red",pch=8)
}
#plot CI
plot(Vehicle~GDP,data=veh,pch=20,col="gray50",
main="Confidence interval",xlab="GDP",ylab="Vehicle",
xlim=c(5500,18000),ylim=c(2900000,7100000),cex.main=2,cex.lab=1.2)
abline(RESULTS,col="navy")
for(i in 1:length(xx.test)){
lines(c(xx.test[i],xx.test[i]),c(CI.low[i],CI.high[i]),col="red",lwd=3)
points(xx.test[i],CI.low[i],col="red",pch=15)
points(xx.test[i],CI.high[i],col="red",pch=15)
points(xx.test[i],fit[i],col="red",pch=8)
}
#draw the scatter plot
##y vs x
plot(Vehicle~GDP,pch=16,cex=1,col="navy",
main="Vehicle vs GDP",xlab="GDP",ylab="Vehicle",cex.main=2,cex.lab=1.2)
#residuals vs x
res=RESULTS$res
plot(res~GDP,pch=16,cex=1,col="gold3",
main="residual vs GDP",xlab="GDP",ylab="residuals",
cex.main=2,cex.lab=1.2)
abline(h=0,col="red")
#histogram of residuals
par(mfrow=c(1,2))
hist(res,breaks=20,border="white",col="olivedrab3",
main="histogram of residuals", xlab="residuals",
cex.main=2,cex.lab=1.2)
#qqplot
qqnorm(res,cex.main=2,cex.lab=1.2)
qqline(res,col="red")
#histogram of residuals
hist(res,breaks=20,border="white",col="olivedrab3",
main="histogram of residuals", xlab="residuals",
cex.main=2,cex.lab=1.2)
