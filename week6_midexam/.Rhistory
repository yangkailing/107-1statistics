1-pbinom(6,10,0.5)
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:1000) {
bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:1000) {
bino.set[i] = Bino.event(n = 1000, p = 0.01)
}
hist(bino.set, prob = T, breaks = 20)
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:1000) {
bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
pb=pbinom(1050,100000,0.01)
1-(pb^4)
#Generate one binomial random variable
Bino.event = function(n, p) {
simp.event = c()
pp = 100*p
for (i in 1:n) {
samp = sample(1:100, 1, replace = T)
# an event with probability p
if (samp <= pp) {
event = 1
} else {
event = 0
}
simp.event[i] = event
}
x = sum(simp.event)
return(x)
}
# Generate a set of binomial random variable
bino.set = c()
for (i in 1:100) {
bino.set[i] = Bino.event(n = 100000, p = 0.01)
}
hist(bino.set, prob = T, breaks = 20)
pb=pbinom(1050,100000,0.01)
1-(pb^4)
max(bino.set)
1-pnorm(59,mean,sd)
n=100
p=0.5
mean=n*p
mean
sd=sqrt(n*p*(1-p))
sd
1-pnorm(59,mean,sd)
1-pnorm(59.5,mean,sd)
1-pbinom(59,n,p)
1-pnorm(60,mean,sd)
1-pnorm(59,mean,sd)
dd=1-pnorm(3,0,sdd)
sdd=sqrt((2.8^2)+(2.8^2))
sdd
dd=1-pnorm(3,0,sdd)
dd
2*dd
bino.set2<-rbinom(100,1000000,0.3)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(100,1000000,0.1)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(1000,1000000,0.001)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.001)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.3)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.4)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
bino.set2<-rbinom(10000,1000000,0.1)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()
?ggplot
View(df)
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data),col=c("green","blue","yellow", "red")) + geom_histogram()
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
library(ggplot2)
ggplot(df, aes(data, fill = group)) + geom_histogram()+
scale_fill_manual(values = c("green","blue","yellow", "red"))
hist(df$data,names.arg=df$group)
hist(df$data)
hist(df$data,col = c("green","blue","yellow", "red"))
hist(df$data,col = c("green","blue","yellow", "red"),nclass=df$group)
x<- 1+5
class(x)
# 3. Date
z<-as.Date ("2015-02-01")
class(z)
is.numeric(z)
ti<-as.numeric(z)
## since 1970,Jan, 1
ti    #UNIX時間，或稱POSIX時間是UNIX或類UNIX系統使用的時間表示方式
grade <- c("Poor","Excellent","Improved","Excellent","Improved")  # 建立一個character vector
grade <- factor(grade)   # 轉換成factor型態
levels(grade)           #如果有一組類別變數，要查看裡面存在著哪些類別，可以用levels()函式：
G = factor(grade, level=c("Poor","Improved","Excellent"), order=TRUE)
G
levels(G)
Student <- read.csv("Student.csv")
setwd("C:/Users/user/Desktop/R/107-1statistics/week2")
Student <- read.csv("Student.csv")
setwd("C:/Users/user/Desktop/R/107-1statistics/week5_midexam")
Student <- read.csv("Student.csv")
##########做類別資料的圖
# Pie Chart
counts <- Student$ReligImp
counts
counts <- table(Student$ReligImp)
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
counts
pct <- round(counts/sum(counts)*100)  #round功能：去掉小數的部分且進位
pct
lbls <- rownames(counts)
lbls
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
counts
lbls <- paste(lbls, pct) # add percents to labels
lbls
lbls <- paste(lbls,"%",sep="_") # ad % to labels  sep"放入想要分隔的符號"
lbls
counts <- table(Student$ReligImp)
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
pct <- round(counts/sum(counts)*100)  #round功能：去掉小數的部分且進位
pct
lbls <- rownames(counts)
lbls <- paste(lbls,pct,"%",sep="") # ad % to labels  sep"放入想要分隔的符號"
lbls
counts <- table(Student$ReligImp)
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
pct <- round(counts/sum(counts)*100)  #round功能：去掉小數的部分且進位
lbls <- rownames(counts)
lbls <- paste(lbls,pct,"%",sep="")    # sep"放入想要分隔的符號"
lbls
?pie
pie(counts, labels = lbls, col=c("yellow","red","blue"), main="ReligImp")
pie(per, labels = paste(per,"%",age), col=c("blue","green","yellow","orange","red"), main="having first child pie")
counts <- table(Student$ReligImp)
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
pct <- round(counts/sum(counts)*100)  #round功能：去掉小數的部分且進位
lbls <- rownames(counts)
lbls <- paste(lbls,pct,"%",sep="")    # sep"放入想要分隔的符號"
pie(counts, labels = lbls , col=c("gray10","gray30","gray50","gray70" ,"gray90") , main="pie chart")
counts <- table(Student$ReligImp)
#"table是負責把資料整理為一個列連表的形式
#如果沒有用table，出來的資料是沒有經過整理的一大段資料)"
pct <- round(counts/sum(counts)*100)  #round功能：去掉小數的部分且進位
lbls <- rownames(counts)
lbls <- paste(lbls,pct,"%",sep=" ")    # sep"放入想要分隔的符號"
pie(counts, labels = lbls , col=c("gray10","gray30","gray50","gray70" ,"gray90") , main="pie chart")
# Bar Plot
barplot(counts, main="Students", col=rainbow(4),
legend = rownames(counts),xlab="ReligImp")
barplot( counts, names.arg =rownames(counts) ,legend = rownames(counts), main="bar graph", col=c("gray10","gray30","gray50","gray70" ,"gray90"),ylab = '%', xlab = 'age')
barplot(counts, names.arg =rownames(counts) ,legend = rownames(counts), main="bar graph", col=c("gray10","gray30","gray50","gray70" ,"gray90"),ylab = '%', xlab = 'age')
barplot(counts, names.arg =rownames(counts) ,legend = rownames(counts), main="bar graph", col=c("gray10","gray30","gray50","gray70" ,"gray90"),ylab = '次數', xlab = 'xlab')
# Crosstabs 列連表
Sex<-Student$Sex
Sex
ReligImp<-Student$ReligImp
mytable <- xtabs(~Sex+ReligImp)   #xtabs() 裡面放入想要做列連表的變數
mytable
# Stacked Bar Plot
barplot(mytable, col=c("red","blue"), main="Comparisons of ReligImp",
xlab="ReligImp", ylab="No. of Students",legend = rownames(mytable))
# Grouped Bar Plot
barplot(mytable, col=c("red","blue"), main="Comparisons of ReligImp",
xlab="ReligImp", ylab="No. of Students",legend = rownames(mytable),
beside=TRUE)
barplot(counts, names.arg =rownames(counts) ,legend = rownames(counts), main="bar graph", col=c("gray10","gray30","gray50","gray70" ,"gray90"),ylab = '次數', xlab = 'xlab',beside="TRUE")
barplot(counts, names.arg =rownames(counts) ,legend = rownames(counts), main="bar graph", col=c("gray10","gray30","gray50","gray70" ,"gray90"),ylab = '次數', xlab = 'xlab',beside="TRUE")
hist(Student$GPA, breaks=10, col="blue", main="GPA Distribution", xlab="GPA",ylab = "人數")
hist(Student$GPA, breaks=10, col="blue", main="Histogram", xlab="GPA",ylab = "人數")
d<-density(Student$GPA, na.rm=TRUE)
plot(d, col="red", main="GPA Distribution", xlab="GPA")
hist(Student$GPA, breaks=10, col="blue", main="GPA Distribution", xlab="GPA",ylab = "人數")
d<-density(Student$GPA, na.rm=TRUE)
plot(d, col="red", main="GPA Distribution", xlab="GPA")
d
# Boxplot -----------------------------------------------------------------
GPA<- Student$GPA
boxplot(GPA~Sex, Student=Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
boxplot(GPA~Sex, Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
plot(d, col="red", main="GPA Distribution", xlab="GPA")
# Boxplot -----------------------------------------------------------------
GPA<- Student$GPA
boxplot(GPA~Sex, Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
?boxplot
#y~x
boxplot(GPA~Sex, Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
#y~x
boxplot(GPA~Sex, Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
# Boxplot -----------------------------------------------------------------
GPA<- Student$GPA
boxplot(GPA~Sex, Student, col=(c("red","blue")),
main="Comparisons of GPA", xlab="Gender", ylab="GPA" )
stem(GPA, scale = 2)
stem(GPA, scale = 1)
GPA<- Student$GPA
stem(GPA, scale = 1)
dotchart(GPA, cex=1, lcolor = NULL)
# or
stripchart(GPA, method = "stack", offset = .3, at = .15, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
stripchart(GPA, method = "stack", offset = .3, at = .15, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
stripchart(GPA, method = "stack", offset = .3, at = .15, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
stripchart(GPA, method = "stack", offset = .2, at = .15, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
stripchart(GPA, method = "stack", offset = .3, at = .0, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
stripchart(GPA, method = "stack", offset = .35, at = .0, pch = 19,
main = "Dotplot of GPA", xlab = "GPA")
hist(GPA, breaks = 50, col = "blue")
pie(per, labels = paste(per,"%",age), col=c("blue","green","yellow","orange","red"), main="having first child pie")
# Build a simulation function
SimProb = function(n,m) {
# Settings
all = 0
#模擬n次
for (i in 1:n) {
# Step1: 每次模擬抽m 包
f.samp = sample(x = 1:4, size = m, replace = T)
# Step2: 看有幾次全部都有
if (1%in%f.samp & 2%in%f.samp & 3%in%f.samp & 4%in%f.samp) {
all = all + 1
}
}
# Step3: Preparing the output message
return(all/n)
}
# 實測 ------------------------------------------------------------------
SimProb(1000,4)
sample=c()
for (i in 1:10){
sample[i]=SimProb(1000,4)
}
sample
# The Xs and Ys of the plot
xx = seq(0, 10, length.out = 100)
yy = dnorm(xx, mean = 5, sd = 1.5)
# Plotting
plot(x = xx, y = yy, type = "l", main = "Normal distribution")
axis(side = 1, at = seq(1,10,by=1))
## Add a line on the plot
abline(v = 5, col = "blue")
## Highlight an area on the plot
region.x = xx[xx>=6 & xx<=8]
region.y = yy[xx>=6 & xx<=8]
polygon(region.x, region.y, col = "yellow")
region.x2 = c(head(region.x,1), region.x, tail(region.x,1))
region.y2 = c(0, region.y, 0)
polygon(region.x2, region.y2, col = "red")
(1-pbinom(4,20,0.2))*(pbinom(35,40,0.1))
(0.1*0.05)/0.02
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
bino.set2<-rbinom(10000,1000000,0.1)
#分類
con2<-c()
for (i in 1:100){
if (bino.set2[i] < 100000){
con2[i]="良好"
}else if (bino.set2[i]>=100000 & bino.set2[i]<300000){
con2[i]="普通"
}else if (bino.set2[i]>=300000 & bino.set2[i]<700000){
con2[i]="不良"
}else{
con2[i]="危險"
}
}
#將類別及數量合併成dataframe
df=data.frame(data=bino.set2,group=con2)
hist(df$data,col = c("green","blue","yellow", "red"))
region.x = xx[xx>=6 & xx<=8]
region.y = yy[xx>=6 & xx<=8]
polygon(region.x, region.y, col = "yellow")
region.x2 = c(head(region.x,1), region.x, tail(region.x,1))
region.y2 = c(0, region.y, 0)
#head()
#tail()
polygon(region.x2, region.y2, col = "red")
