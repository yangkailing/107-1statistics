CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x<-rnorm(n,mean=mu,sd=sd)
mean.x[i]<-mean(x)
se.x[i]<-sd(x)/sqrt(n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>mu & CI.Lower[i]<mu) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu))  #n=甚麼都不畫
abline(h=mu,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu)))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu,"Captured")),expression(paste(mu,"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=mu, Population.sd=sd,
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu=50, sd=5, conf.level=0.95)
a=c(1,3,5,7,9)
b=c(2,2,4,6,8)
a-b
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
Sim_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Simd_CI<-function(n,mu1 ,sd1,mu2 ,sd2,m,conf.level){
prob<-(1-conf.level)/2
t.value=qt(prob,df=n-1,lower.tail=FALSE)
mean.x=c()
se.x=c()
CI.half=c()
CI.Up=c()
CI.Lower=c()
Check=c()
#Mumeanltiple sampling
for (i in 1:m){
#one sampling
x1<-rnorm(n,mean=mu1,sd=sd1)
x2<-rnorm(n,mean=mu2,sd=sd2)
mean.x[i]<-mean(x1-x2)
se.x[i]<-sqrt((sd(x1)^2)/n+(sd(x2)^2)/n)
#calculate one confidence interval
CI.half[i]<-t.value*se.x[i]
CI.Up[i]<-mean.x[i]+CI.half[i]
CI.Lower[i]<-mean.x[i]-CI.half[i]
if(CI.Up[i]>(mu1-mu2) & CI.Lower[i]<(mu1-mu2)) Check[i]<-1 else Check[i]<-0
}
plot(c(CI.Up,CI.Lower),type="n",pch=19,xlim=c(1,m),xlab="Trial",ylab=expression(mu[d]))  #n=甚麼都不畫
abline(h=mu1-mu2,col="blue")
#check weather each confidence interval captures the population mean (mu)
for (i in 1:m){
if (Check[i]==1){
points(i, mean.x[i], col="green", pch=10)
points(i, CI.Up[i], col="green", pch=20)
points(i, CI.Lower[i], col="green", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="green", pch=19)
}else{
points(i, mean.x[i], col="red", pch=10)
points(i, CI.Up[i], col="red", pch=20)
points(i, CI.Lower[i], col="red", pch=20)
lines(c(i,i),c(CI.Lower[i],CI.Up[i]), col="red", pch=19)
}
}
title(expression(paste("Simulating confidence interval for",mu[d])))
legend("bottomright",cex=0.6,bty = "n",ncol = 2,
c(expression(paste(mu[d],"Captured")),expression(paste(mu[d],"Not Captured"))),
fill = c("green","red"))
No.Captured = m-sum(Check)
RESULT = list(Trial=m, Sample.Size=n,
Population.mean=c(mu1,mu2), Population.sd=c(sd1,sd2),
Confidence=conf.level,
No.Captured=No.Captured)
return(RESULT)
}
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
Sim_CI(n=30, m=100, mu1=50 ,mu2=45, sd1=5, sd2=10, conf.level=0.95)
1.48/sqrt(30)
-2.33*sqrt(1/40+1/50)
abs(-2.33*sqrt(1/40+1/50))
Prop_CI = function(n, p, confd) {
all.phat = c()
for (i in 1:10000) {
phat = sum(sample(c(0,1), n, replace = T, prob = c(1-p,p)))/n
all.phat[i] = phat
}
all.phat = sort(all.phat)
low.per = ceiling(((1-confd)/2)*10000)
low.vlue = all.phat[low.per]
high.per = ceiling((1-((1-confd)/2))*10000)
high.vlue = all.phat[high.per]
results = c(paste((1-confd)/2*100,"%"), paste((1-((1-confd)/2))*100,"%"), low.vlue, high.vlue)
mean.p = mean(all.phat)
sd.p = sd(all.phat)
CI = list(CI = matrix(results, nrow = 2, byrow = T), mean = mean.p, sd = sd.p )
return(CI)
}
Prop_CI(883,0.68,0.95)
n = 883
p = 0.68
z = qnorm((1-0.95)/2, lower.tail = F)
se = sqrt(p*(1-p)/n)
high.c = p + z*se; high.c
low.c = p - z*se; low.c
mu=60;sigma=6;n=36
mean=mu;mean
sd=sigma/sqrt(n);sd
z=qnorm((1-0.95)/2,lower.tail = F)
z
A=mean+z*sd
B=mean-z*sd
z=qt((1-0.95)/2, df = 35, lower.tail = FALSE)
z
A=mean+z*sd
B=mean-z*sd
z=qt((1-0.95)/2, df = 35, lower.tail = FALSE)
A=mean+z*sd
B=mean-z*sd
z=qt((1-0.95)/2, df = 35, lower.tail = FALSE)
A=mean+z*sd;A
B=mean-z*sd;B
z=qt((1-0.95)/2, df = 35, lower.tail = FALSE)
A=mean-z*sd;A
B=mean+z*sd;B
prop.test(x=c(0.611*131,0.426*61),n=c(131,61),alternative = "two.sided",conf.level = 0.99)
prop.test(x=c(0.611*131,0.426*61),n=c(131,61),alternative = "two.sided",conf.level = 0.95)
sd=sqrt((0.2*0.8)/200)
z=0.25-0.2/sd
z
sd=sqrt((0.2*0.8)/200)
z=0.25-0.20/sd
z
sd=sqrt((0.2*0.8)/200)
sd
z=0.25-0.20/sd
z
sd=sqrt((0.2*0.8)/200)
z=(0.25-0.20)/sd
z
sd=sqrt((0.2*0.8)/200)
z=(0.25-0.20)/sd
z
pnorm(z, lower.tail = FALSE)
p1=60/200;n1=200
p2=50/200;n2=200
phat=(n1*p1+n2*p2)/n1+n2
z=(p1-p2-0)/sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
z
p1=60/200;n1=200
p2=50/200;n2=200
phat=(n1*p1+n2*p2)/n1+n2
phat
z=(p1-p2-0)/sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
z
p1=60/200;n1=200
p2=50/200;n2=200
phat=(n1*p1+n2*p2)/(n1+n2)
phat
z=(p1-p2-0)/sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
z
pnorm(z, lower.tail = FALSE)
prop.test(x=50,n=200,alternative = "two.sided",conf.level = 0.90)
brt_b=prop.test(x=50,n=200,alternative = "two.sided",conf.level = 0.90)
brt_b
brt_b=prop.test(x=50,n=200,alternative = "two.sided",conf.level = 0.90)
brt_b$conf.int
brt_b=prop.test(x=50,n=200,alternative = "two.sided",conf.level = 0.90)
brt_b$conf.int
brt_o=prop.test(x=60,n=200,alternative = "two.sided",conf.level = 0.90)
brt_o$conf.int
plot(c(0,3),type='n',xlim=c(0.2,0.4),xlab='proportion of using',ylab='',axes=F,
main='Comparsion of the two confidence interval')
lines(c(0.2008983,0.3061036),c(2,2))
text(0.1,2,labels='zinc')
lines(c(0.2008983,0.2008983),c(1.95,2.05))
lines(c(0.3061036,0.3061036),c(1.95,2.05))
lines(c(0.25,0.25),c(1.95,2.05))
lines(c(0.2473182,0.3582691),c(1,1))
text(0.15,1,labels='placebo')
lines(c(0.2473182,0.2473182),c(0.95,1.05))
lines(c(0.3582691,0.3582691),c(0.95,1.05))
lines(c(0.3,0.3),c(0.95,1.05))
axis(1)
plot(c(0,3),type='n',xlim=c(0.1,0.4),xlab='proportion of using',ylab='',axes=F,
main='Comparsion of the two confidence interval')
lines(c(0.2008983,0.3061036),c(2,2))
text(0.1,2,labels='zinc')
lines(c(0.2008983,0.2008983),c(1.95,2.05))
lines(c(0.3061036,0.3061036),c(1.95,2.05))
lines(c(0.25,0.25),c(1.95,2.05))
lines(c(0.2473182,0.3582691),c(1,1))
text(0.15,1,labels='placebo')
lines(c(0.2473182,0.2473182),c(0.95,1.05))
lines(c(0.3582691,0.3582691),c(0.95,1.05))
lines(c(0.3,0.3),c(0.95,1.05))
axis(1)
plot(c(0,3),type='n',xlim=c(0.1,0.4),xlab='proportion of using',ylab='',axes=F,
main='Comparsion of the two confidence interval')
lines(c(0.2008983,0.3061036),c(2,2))
text(0.15,2,labels='zinc')
lines(c(0.2008983,0.2008983),c(1.95,2.05))
lines(c(0.3061036,0.3061036),c(1.95,2.05))
lines(c(0.25,0.25),c(1.95,2.05))
lines(c(0.2473182,0.3582691),c(1,1))
text(0.20,1,labels='placebo')
lines(c(0.2473182,0.2473182),c(0.95,1.05))
lines(c(0.3582691,0.3582691),c(0.95,1.05))
lines(c(0.3,0.3),c(0.95,1.05))
axis(1)
plot(c(0,3),type='n',xlim=c(0.1,0.4),xlab='proportion of using',ylab='',axes=F,
main='Comparsion of the two confidence interval')
lines(c(0.2008983,0.3061036),c(2,2))
text(0.18,2,labels='zinc')
lines(c(0.2008983,0.2008983),c(1.95,2.05))
lines(c(0.3061036,0.3061036),c(1.95,2.05))
lines(c(0.25,0.25),c(1.95,2.05))
lines(c(0.2473182,0.3582691),c(1,1))
text(0.23,1,labels='placebo')
lines(c(0.2473182,0.2473182),c(0.95,1.05))
lines(c(0.3582691,0.3582691),c(0.95,1.05))
lines(c(0.3,0.3),c(0.95,1.05))
axis(1)
plot(c(0,3),type='n',xlim=c(0.1,0.4),xlab='proportion of using',ylab='',axes=F,
main='Comparsion of the two confidence interval')
lines(c(0.2008983,0.3061036),c(2,2))
text(0.18,2,labels='brt_b')
lines(c(0.2008983,0.2008983),c(1.95,2.05))
lines(c(0.3061036,0.3061036),c(1.95,2.05))
lines(c(0.25,0.25),c(1.95,2.05))
lines(c(0.2473182,0.3582691),c(1,1))
text(0.23,1,labels='brt_o')
lines(c(0.2473182,0.2473182),c(0.95,1.05))
lines(c(0.3582691,0.3582691),c(0.95,1.05))
lines(c(0.3,0.3),c(0.95,1.05))
axis(1)
se=sqrt((20^2/100)+(10^2/100))
se
t_score=(35-30)-0/se
se=sqrt((20^2/100)+(10^2/100))
t_score=(35-30)-0/se;t_score
se=sqrt((20^2/100)+(10^2/100))
t_score=((35-30)-0)/se;t_score
pt(t_score,df=99,lower.tail = F)
mud=-1
s=5
t_score=(-1-0)/(5/sqrt(100));t_score
pt(t_score,df=99)
se=sqrt((10^2/100)+(10^2/100))
t_score=((32.5-30)-0)/se;t_score
pt(t_score,df=99,lower.tail = F)
2*pt(t_score,df=99,lower.tail = F)
se=sqrt((10^2/100)+(10^2/100))
t_score=((32.5-30)-0)/se
dhat=t_score*sqrt((1/100+1/100))
se=sqrt((10^2/100)+(10^2/100))
t_score=((32.5-30)-0)/se
dhat=t_score*sqrt((1/100+1/100))
dhat
load(pennstate2.csv)
read.csv(pennstate2.csv)
setwd("C:/Users/user/Desktop/R/107-1statistics/week12_midexam")
read.csv(pennstate2.csv)
read.csv("pennstate2.csv")
data<-read.csv("pennstate2.csv")
data<-read.csv("pennstate2.csv")
data
x = xtabs(Freq ~ t, data = data)
data[data$t=="Y"]
data$t=="Y"
data[data$t=="Y",]
count(data[data$t=="Y",])
count.fields(data[data$t=="Y",])
data[data$t=="Y",data$t]
data[data$t=="Y",t]
data[data$t=="Y",3]
count(data[data$t=="Y",3])
sum(data[data$t=="Y",3])
str(data[data$t=="Y",])
str(data)
str(data[data$t=="Y",])
phat=31/205;n=205
z=(phat-0.2)/sqrt(0.2*0.8/n)
z
phat=31/205;n=205
phat
z=(phat-0.2)/sqrt(0.2*0.8/n)
z
str(data)
str(data[data$t=="Y",])
pnorm(z)
pnorm(z,lower.tail = F)
prop.test(x = 31, n = 205,
p = 0.2, alternative = "greater",
conf.level = 0.95, correct = F)
x = xtabs(1 ~ t, data = data)
str(data[data$s=="F",])
str(data[data$s=="F"] & data[data$t=="Y"],)
xtabs(s ~ t, data = data)
str(data[s=="F" & t=="Y"],)
str(data[s=="F" & t=="Y",])
str(data[data$s=="F",])
b<-str(data[data$s=="F",])
str(b[t=="Y",])
b<-data[data$s=="F",]
str(b[t=="Y",])
b
b[t=="Y",]
str(b)
str(b[b$t=="Y",])
b<-data[data$s=="F",]
str(b)
str(b[b$t=="Y",])
c<-data[data$s=="M",]
str(c)
str(c[c$t=="Y",])
p1=13/68;n1=68
p2=18/137;n2=137
phat=(n1*p1+n2*p2)/(n1+n2)
z=(p1-p2-0)/sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
z
p1=13/68;n1=68
p2=18/137;n2=137
phat=(n1*p1+n2*p2)/(n1+n2)
z=(p1-p2-0)/sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
z
pnorm(z, lower.tail = FALSE)
prop.test(x = 50, n = 200,
p = 0.2, alternative = "greater",
conf.level = 0.9, correct = F)
prop.test(x = c(60, 50), n = c(200,200),
alternative = "greater",
conf.level = 0.9, correct = F)
prop.test(x = 50, n = 200,
p = 0.2, alternative = "greater",
conf.level = 0.95, correct = F)
prop.test(x = c(60, 50), n = c(200,200),
alternative = "greater",
conf.level = 0.95, correct = F)
prop.test(x = c(13,18), n = c(68,137),
alternative = "greater",
conf.level = 0.95, correct = F)
